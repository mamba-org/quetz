name: CI

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  test_quetz:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        test_database: ["sqlite", "postgres"]
        db_init: ["use-migrations", "create-tables"]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2

      - name: Check status code
        shell: bash -l -e {0}
        run: |
          echo hello

      - name: Step 2
        shell: bash -l -e -o pipefail {0}
        run: |
          cat abc
          echo hello

      - name: Step 3
        if: always()
        shell: bash -l +e {0}
        run: |
          cat abc
          echo hello

      - name: install mamba
        uses: mamba-org/provision-with-micromamba@main
      - name: test quetz
        shell: bash -l -eo pipefail {0}
        env:
          TEST_DB_BACKEND: ${{ matrix.test_database }}
          QUETZ_TEST_DBINIT: ${{ matrix.db_init }}
          POSTGRES_HOST: localhost
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
          S3_ACCESS_KEY: ${{ secrets.s3_access_key }}
          S3_SECRET_KEY: ${{ secrets.s3_secret_key }}
          S3_ENDPOINT: https://s3.sbg.cloud.ovh.net/
          S3_REGION: sbg
        run: |
          # install dev dependencies
          pip install -e .[all,dev]
          pip install redis rq
          pip install pytest-github-actions-annotate-failures

      - name: Testing server
        shell: bash -l -eo pipefail {0}
        env:
          TEST_DB_BACKEND: ${{ matrix.test_database }}
          QUETZ_TEST_DBINIT: ${{ matrix.db_init }}
          POSTGRES_HOST: localhost
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
          S3_ACCESS_KEY: ${{ secrets.s3_access_key }}
          S3_SECRET_KEY: ${{ secrets.s3_secret_key }}
          S3_ENDPOINT: https://s3.sbg.cloud.ovh.net/
          S3_REGION: sbg
        run: |
          if [ "$TEST_DB_BACKEND" == "postgres" ]; then
            export QUETZ_TEST_DATABASE="postgresql://postgres:mysecretpassword@${POSTGRES_HOST}:${POSTGRES_PORT}/postgres"
            echo "Running with postgres"
          fi

          if [ "$QUETZ_TEST_DBINIT" == "use-migrations" ]; then
            echo "Using migrations"
          fi

          export QUETZ_IS_TEST=1
          pytest -v ./quetz/tests/ --cov-config=.coveragerc --cov=. --cov-report=xml

      - name: Test the plugins
        id: test_plugins
        shell: bash +e -l -o pipefail {0}
        env:
          TEST_DB_BACKEND: ${{ matrix.test_database }}
          QUETZ_TEST_DBINIT: ${{ matrix.db_init }}
          POSTGRES_HOST: localhost
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
          S3_ACCESS_KEY: ${{ secrets.s3_access_key }}
          S3_SECRET_KEY: ${{ secrets.s3_secret_key }}
          S3_ENDPOINT: https://s3.sbg.cloud.ovh.net/
          S3_REGION: sbg
        run: |
          cat abc

          if [ "$TEST_DB_BACKEND" == "postgres" ]; then
            export QUETZ_TEST_DATABASE="postgresql://postgres:mysecretpassword@${POSTGRES_HOST}:${POSTGRES_PORT}/postgres"
            echo "Running with postgres"
          fi

          # add micromamba to path
          export PATH=$(dirname $MAMBA_EXE):$PATH
          echo "adding micromamba to path: $MAMBA_EXE"

          pip install --no-deps git+https://git@github.com/regro/libcflib@master || exit 1
          
          cat abc

          for f in ./plugins/quetz_*
          do
            cat abc
            echo "::group::Testing plugin${f}"
            quetz plugin install $f
            pytest -v $f
            if [ $? -ne 0 ]; then
              echo "tests_failed=true" >> $GITHUB_OUTPUT
            fi
            echo "::endgroup::"
          done

      - name: Check if tests failed
        run: |
          if [ ${{ steps.test_plugins.outputs.tests_failed }} == "true" ]; then
            echo "Some of the plugin tests failed!"
            exit 1
          fi

      - uses: codecov/codecov-action@v1
        with:
          verbose: true
          file: ./coverage.xml

  test_release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: install missing dependency
        run: pip install ipython_genutils

      - name: Check Release
        uses: jupyter-server/jupyter_releaser/.github/actions/check-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
